Intuition
Hi there,

Let's dive deep ðŸ¤¿ into today's interesting problem.
The problem says that we want to find if given number n is power of four n=4xn = 4^xn=4 
x
  or not.

Seems easy ?ðŸ¤”
Actually the first valid solution is Brute Force.
We can check all the possible power of fours and if our number is one of them then we return true.
Concise and simple. ðŸ‘Œ
But what is our range, how many number we will check ? ðŸ¤”
our constraints are 2e31 <= n <= 2e31 - 1 so max number to check it power is log(2e31) base 4 which is 15.5.
But since this is the maximum value that int data type can hold so we will search maximum from (0 -> 15) because 4^16 will give us integer overflow.

Now, this is the Brute Force solution with O(log(N)2)O(log(N)^2)O(log(N) 
2
 ) complexity, can we do better?ðŸ¤”
Actually, we can !ðŸ¤¯
We will have some help from math especially Logarithms.âž—âž•
if we know that n=4xn = 4^xn=4 
x
  then for sure log(n) base 4 is an integer and if there is a fraction then n is not to the power of four.

EX1: n = 16
n = 4 ^ 2 => power of four
x = 2
EX2: n = 256
n = 4 ^ 4 => power of four
x = 4
EX3: n = 147
n = 4 ^ 3.6 => not power of four
x = 3.6
Great ! but how will we get that log base 4 since programming languages don't implement it !.
Here comes the Logarithms properties. We have a rule called Change of Base Rule.

image.png

Most of programming languages implements log base 10 or log base 2 or even log base natural number e.

We will pick one of these implemented logs and compute log base 4 using them. and check if result if integer if not then it is not power of four.

Is there another valid solution ?ðŸ¤”
Say that I don't want to use this logarithmic rule and I am not good with it can I do something else? ðŸ¤¨

Actually we can ! ðŸ¤¯

Let's see this observation.
n = 4x4 ^ x4 
x
 
n = (2âˆ—2)x(2 * 2) ^ x(2âˆ—2) 
x
 
n = 2x2 ^ x2 
x
  * 2x2 ^ x2 
x
 
sqrt(n) = 2x2 ^ x2 
x
 
log2(sqrt(n)) = x

What is this ! ðŸ¤¯
This is the beauty of math. ðŸ¤©
We can get x without using change of base rule. since n = 4x4 ^ x4 
x
  so it is naturally product of two similar numbers then we can calculate its square root. then get its log base 2 easily.
most programming languages implements log base 2. Sadly, except Java so we will go back to change of base rule.
But this also a valid solution if you are not using Java and don't want to calculate many logarithms.ðŸ’ª

And this is the solution for our today'S problem I hope that you understood itðŸš€ðŸš€

Approach
Brute Force
Start an iteration from i equal to 0 to 15, representing powers of 4 from 4^0 to 4^15 since the maximum value that int can hold is 4^(15.5).
Calculate the powerOfFour by raising 4 to the power of i.
if powerOfFour is equal to the input integer n. If they are equal, return true because n is a power of four.
If powerOfFour becomes greater than n, there's no need to continue the loop, so return false.
If none of the powers of 4 match n during the loop, return false to indicate that n is not a power of four.
Complexity
Time complexity: O(log(N)2)O(log(N)^2)O(log(N) 
2
 )
Since we are iterating from 0 to 15 which 15 is log(INT_MAX) to the base of 4 and in each iteration we calculate the power of 4i4^i4 
i
  which is logarithmic operations so total complexity is O(log(N)^2).
Space complexity: O(1)O(1)O(1)
Since we are only storing constant variables.
First Math Solution
Check if the input integer n is equal to 1. If it is, return true since 1 is a power of four.
If n is non-positive (less than or equal to 0), return false since powers of four are positive integers.
Calculate the logarithm of 'n' with a base of 4 and store the result in the variable 'logarithmBase4.'
Check if 'logarithmBase4' is an integer by comparing it to its integer cast. If they are equal, return true; otherwise, return false.
Complexity
Time complexity: O(1)O(1)O(1)
Since we are only doing math operations without any loops or recursion.
Space complexity: O(1)O(1)O(1)
Since we are only storing constant variables.
Second Math Solution
Check if the input integer n is equal to 1. If it is, return true since 1 is a power of four.
If n is non-positive (less than or equal to 0), return false since powers of four are positive integers.
Calculate the square root of n and store it in the variable sqrtN.
Compute the logarithm base 2 of sqrtN and store it in log2SqrtN.
Check if log2SqrtN is an integer (i.e., it has no fractional part). If it is an integer, return true; otherwise, return false.
Complexity
Time complexity: O(1)O(1)O(1)
Since we are only doing math operations without any loops or recursion.
Space complexity: O(1)O(1)O(1)
Since we are only storing constant variables.
Code
Brute Force
class Solution {
public:
    bool isPowerOfFour(int n) {
        // Iterate through powers of 4 from 4^0 to 4^15
        for (int i = 0; i <= 15; i++) {
            int powerOfFour = pow(4, i);
            
            // If we find a power of four equal to 'n', return true
            if (powerOfFour == n)
                return true;
            
            // If the current power of four is greater than 'n', there's no need to continue
            if (powerOfFour > n)
                return false;
        }
        
        // 'n' is not a power of four
        return false;
    }
};
First Math Solution
class Solution {
public:
    bool isPowerOfFour(int n) {
        // If 'n' is 1, it is a power of four
        if (n == 1)
            return true;
        
        // If 'n' is non-positive, it cannot be a power of four
        if (n <= 0)
            return false; 
        
        // Calculate the logarithm of 'n' with base 4
        double logarithmBase4 = log(n) / log(4);
        
        // Check if the result of the logarithmic operation is an integer
        return (logarithmBase4 == (int)logarithmBase4);
    }
};
Second Math Solution
class Solution {
public:
    bool isPowerOfFour(int n) {
        // If 'n' is 1, it is a power of four
        if (n == 1)
            return true;
        
        // If 'n' is non-positive, it cannot be a power of four
        if (n <= 0)
            return false; 
        
        // Calculate the square root of 'n'
        double sqrtN = sqrt(n);

        // Take the logarithm base 2 of the square root
        double log2SqrtN = log2(sqrtN);
        
        // Check if the result of the logarithmic operation is an integer
        return (log2SqrtN == (int)log2SqrtN);
    }
};
